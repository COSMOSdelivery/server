generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CLIENT
  ADMIN
  LIVREUR
  SERVICECLIENT
}


enum EtatCommande {
  EN_ATTENTE
  A_ENLEVER
  ENLEVE
  AU_DEPOT
  RETOUR_DEPOT
  EN_COURS
  A_VERIFIER
  LIVRES
  LIVRES_PAYE
  ECHANGE
  RETOUR_DEFINITIF
  RETOUR_INTER_AGENCE
  RETOUR_EXPEDITEURS
  RETOUR_RECU_PAYE
ABANDONNEE
}

enum EtatFeedback {
  EN_COURS
  RESOLU
  EN_ATTENTE
}

model Admin {
  idAdmin     Int         @id @default(autoincrement())
  utilisateur Utilisateur @relation(fields: [idAdmin], references: [id], onDelete: Cascade)
}

model Serviceclient {
  idServiceclient Int         @id @default(autoincrement())
  utilisateur     Utilisateur @relation(fields: [idServiceclient], references: [id], onDelete: Cascade)
}

model Client {
  idClient         Int                @id @default(autoincrement())
  utilisateur      Utilisateur        @relation(fields: [idClient], references: [id], onDelete: Cascade)
  nomShop          String
  gouvernorat      String
  ville            String
  localite         String
  codePostal       String
  adresse          String
  fraisLivraison   Float              @default(7) // default well be deleted
  fraisRetour      Float              @default(7) // default well be deleted
  Commandes        Commande[] // Relation avec plusieurs commandes
  FeedbackCommande FeedbackCommande[]
  paiements Paiement[]
  Manifeste        Manifeste[]
  //Paiement         Paiement[]
}


model Utilisateur {
  id                Int            @id @default(autoincrement())
  nom               String
  prenom            String
  email             String         @unique
  password          String
  telephone1        String
  telephone2        String?
  codeTVA           String
  cin               String         @unique
  role              Role
  dateInscription   DateTime       @default(now())
  derniereMiseAJour DateTime       @updatedAt
  admin             Admin?
  client            Client?
  livreur           Livreur?
  serviceclient     Serviceclient?
  resetPasswordOtp  String?
  resetPasswordOtpExpiry DateTime?
  imageUrl          String?
  createdDebriefs   Debrief[]      @relation("DebriefCreatedBy") // Added relation field
}

model Livreur {
  idLivreur   Int                  @id @default(autoincrement())
  utilisateur Utilisateur          @relation(fields: [idLivreur], references: [id], onDelete: Cascade)
  gouvernorat String
  Historique  HistoriqueCommande[]
  commandes   Commande[]
  debriefs    Debrief[]            @relation("DebriefLivreur") // Added relation field
}
enum DebriefStatus {
  OPEN
  CLOSED
}

model Debrief {
  id                Int            @id @default(autoincrement())
  deliveryAgentId   Int
  livreur           Livreur        @relation("DebriefLivreur", fields: [deliveryAgentId], references: [idLivreur], onDelete: Cascade)
  zone              String
status DebriefStatus @default(OPEN)
  date              DateTime       @default(now())
createdAt DateTime @default(now())
  ordersDelivered   Int            @default(0)
  ordersPlanned     Int
  notes             String?
  commandes         Commande[]     @relation("DebriefCommandes")
  createdById       Int
  createdBy         Utilisateur    @relation("DebriefCreatedBy", fields: [createdById], references: [id], onDelete: Cascade)
  updatedAt         DateTime       @updatedAt
}

model HistoriqueCommande {
  id          Int          @id @default(autoincrement())
  date        DateTime     @default(now())
  etat        EtatCommande // État à ce moment de l'historique
  commentaire String?
  id_commande String
  id_livreur  Int?
  commande    Commande     @relation(fields: [id_commande], references: [code_a_barre], onDelete: Cascade)
  livreur     Livreur?     @relation(fields: [id_livreur], references: [idLivreur], onDelete: Cascade)

  @@unique([id_commande, id_livreur, date]) // Permet de tracer les changements d'état avec timestamp
}

model FeedbackCommande {
  id          Int      @id @default(autoincrement())
  titre       String
  commentaire String
  dateAjout   DateTime @default(now())
  //etatFeedback EtatFeedback @default(EN_ATTENTE)          maybe ++
  id_commande String
  commande    Commande @relation(fields: [id_commande], references: [code_a_barre])
  id_client   Int
  client      Client   @relation(fields: [id_client], references: [idClient])
}

model Manifeste {
  id           Int        @id @default(autoincrement())
  dateCreation DateTime   @default(now())
  id_client    Int
  client       Client     @relation(fields: [id_client], references: [idClient])
  commandes    Commande[]
  estImprime   Boolean    @default(false)
}
enum ModePaiement {
  ESPECE
  CHEQUE
  ESPECE_ou_CHEQUE
  VIREMENT
}

enum StatutPaiement {
  NON_PAYE
  PAYE
  EN_ATTENTE
  REFUSE
}

model Paiement {
  id             Int             @id @default(autoincrement())
  datePaiement   DateTime        @default(now())
  montant        Float
  mode           ModePaiement?
  statut         StatutPaiement  @default(EN_ATTENTE)
  id_client      Int
  client         Client          @relation(fields: [id_client], references: [idClient], onDelete: Cascade)
  commandes      Commande[]      @relation("PaiementCommandes")
  notes          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Commande {
  code_a_barre         String         @id
  nom_prioritaire      String
  prenom_prioritaire   String
  gouvernorat          String
  ville                String
  localite             String
  codePostal           String
  adresse              String
  telephone1           String
  telephone2           String?
  designation          String
  prix                 Float
  nb_article           Int
  etat                 EtatCommande
  mode_paiement        ModePaiement
  statutPaiement       StatutPaiement @default(NON_PAYE)
  possible_ouvrir      Boolean
  possible_echange     Boolean
  code_a_barre_echange Int?
  nb_article_echange   Int?
  remarque             String?
  est_imprimer         Boolean        @default(false)
  id_livreur           Int?
  dateAjout            DateTime       @default(now())
  derniereMiseAJour    DateTime       @updatedAt
  id_client            Int
  paiements            Paiement[]     @relation("PaiementCommandes") // Updated relation
  client               Client         @relation(fields: [id_client], references: [idClient])
  livreur              Livreur?       @relation(fields: [id_livreur], references: [idLivreur])
  Historique           HistoriqueCommande[]
  feedbacks            FeedbackCommande[]
  manifesteId          Int?
  debriefs             Debrief[]      @relation("DebriefCommandes")
  Manifeste            Manifeste?     @relation(fields: [manifesteId], references: [id])
}